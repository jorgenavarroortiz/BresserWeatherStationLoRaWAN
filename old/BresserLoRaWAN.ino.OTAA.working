/*

Module:  BresserLoRaWAN.ino

Author:
    Jorge Navarro-Ortiz

TO DO:
- Do not send a LoRaWAN frame if there is no correct WS data and enter deep-sleep if there is a timeout
- Use RTC memory to avoid LoRaWAN OTAA joins -> check if it works! -> I think it is only for ABP...
- Check the time between messages (deep sleeps)... there is some deviation
- Allow also ABP
*/

// ---------
// Libraries
// ---------

// For the Bresser weather station
#include <Arduino.h>
#include "WeatherSensorCfg.h"
#include "WeatherSensor.h"

// For LoRaWAN
#include <Arduino_LoRaWAN_network.h>
#include <Arduino_LoRaWAN_EventLog.h>
#include <arduino_lmic.h>

// ---------------------
// Data to be configured
// ---------------------
static const std::uint32_t  uplinkPeriodMsWeatherSensor = 60 * 60 * 1000; // ms (not used, since the ESP32 will enter deep-sleep after getting the weather data, i.e. only one transmission before rebooting)
static const std::uint32_t        getWeatherDataTimeout = 60 * 1000;      // ms
static const std::uint32_t intervalBetweenTransmissions = 120 * 1000;     // ms
static const std::uint32_t         minimumDeepSleepTime = 60 * 1000;      // ms
static const std::uint32_t                 maxAwakeTime = 300 * 1000;     // ms
static const std::uint32_t timeToSleepAfterMaxAwakeTime = 300 * 1000;     // ms

// deveui, little-endian
static const std::uint8_t deveui[] = { 0x2C, 0xB4, 0x05, 0xD0, 0x7E, 0xD5, 0xB3, 0x70 };

// appeui, little-endian
static const std::uint8_t appeui[] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };

// appkey: just a string of bytes, sometimes referred to as "big endian".
static const std::uint8_t appkey[] = { 0x18, 0x23, 0x50, 0xF9, 0xCC, 0xC3, 0x73, 0x5F, 0x96, 0xE2, 0xF2, 0x83, 0x1B, 0x71, 0x9F, 0x42 };

// ---------
// Constants
// ---------

#if defined(ARDUINO_heltec_wireless_stick)
// https://github.com/espressif/arduino-esp32/blob/master/variants/heltec_wireless_stick/pins_arduino.h
#define PIN_LMIC_NSS SS
#define PIN_LMIC_RST RST_LoRa
#define PIN_LMIC_DIO0 DIO0
#define PIN_LMIC_DIO1 DIO1
#define PIN_LMIC_DIO2 DIO2
#endif

// Uplink message payload size
// The maximum allowed for all data rates is 51 bytes.
const uint8_t PAYLOAD_SIZE = 51;

// ---------
// Variables
// ---------

// Sleep request, set in NetTxComplete()
bool sleepReq = false;

// Boot time
std::uint32_t tBoot;

// Number of boots
RTC_DATA_ATTR uint32_t noBoot = 0;


/****************************************************************************\
|
|	The LoRaWAN object
|
\****************************************************************************/

class cMyLoRaWAN : public Arduino_LoRaWAN_network {
public:
    cMyLoRaWAN() {};
    using Super = Arduino_LoRaWAN_network;
    void setup();

protected:
    // you'll need to provide implementation for this.
    virtual bool GetOtaaProvisioningInfo(Arduino_LoRaWAN::OtaaProvisioningInfo*) override;
    virtual void NetTxComplete(void) override; // notify client that transmission has completed
    virtual void NetJoin(void) override;       // notify client has joined the network
};


/****************************************************************************\
|
|	The sensor object
|
\****************************************************************************/

class cSensor {
public:
    /// \brief the constructor. Deliberately does very little.
    cSensor() {};

    ///
    /// \brief set up the sensor object
    ///
    /// \param uplinkPeriodMs optional uplink interval. If not specified,
    ///         transmit every six minutes.
    ///
    void setup(std::uint32_t uplinkPeriodMs = 6 * 60 * 1000);

    ///
    /// \brief update sensor loop.
    ///
    /// \details
    ///     This should be called from the global loop(); it periodically
    ///     gathers and transmits sensor data.
    ///
    void loop();

private:
    void doUplink();

    bool m_fUplinkRequest;              // set true when uplink is requested
    bool m_fBusy;                       // set true while sending an uplink
    std::uint32_t m_uplinkPeriodMs;     // uplink period in milliseconds
    std::uint32_t m_tReference;         // time of last uplink

    // The weather station sensor
    bool getWeatherStationData(uint32_t timeout);
    void printWeatherStationData();
};

/****************************************************************************\
|
|	Globals
|
\****************************************************************************/

// Pin mapping
const cMyLoRaWAN::lmic_pinmap myPinMap = {
  .nss = PIN_LMIC_NSS,
  .rxtx = cMyLoRaWAN::lmic_pinmap::LMIC_UNUSED_PIN,
  .rst = PIN_LMIC_RST,
  .dio = { PIN_LMIC_DIO0, PIN_LMIC_DIO1, PIN_LMIC_DIO2 },
  .rxtx_rx_active = 0,
  .rssi_cal = 0,
  .spi_freq = 8000000,
  .pConfig = NULL
};

// the global LoRaWAN instance.
cMyLoRaWAN myLoRaWAN {};

// the global sensor instance
cSensor mySensor {};

// the weather station sensor
WeatherSensor weatherSensor;

// the global event log instance
Arduino_LoRaWAN::cEventLog myEventLog;


/****************************************************************************\
|
|	auxiliary functions()
|
\****************************************************************************/
/// Determine sleep duration and enter Deep Sleep Mode
void checkGoingToSleep(void) {
  std::uint32_t timeFromBoot = millis() - tBoot; // ms

  if (sleepReq) {
      // Going to deep sleep requested after LoRaWAN transmission complete
      std::uint32_t timeToSleep = intervalBetweenTransmissions - timeFromBoot; // ms
      if (timeToSleep < minimumDeepSleepTime)
          timeToSleep = minimumDeepSleepTime;

      Serial.printf("Requested going to deep sleep after LoRaWAN transmission complete! Sleep time is %d ms.\n", timeToSleep);
      Serial.printf("Shutdown()\n");

      myLoRaWAN.Shutdown();
      ESP.deepSleep(timeToSleep * 1000); // usec
  }

  if (timeFromBoot > maxAwakeTime) {
      // Too much time awake!

      Serial.printf("Max awake timer expired! (time from boot %d ms, max awake time %d ms)\n");
      Serial.printf("Shutdown()\n");

      myLoRaWAN.Shutdown();
      ESP.deepSleep(timeToSleepAfterMaxAwakeTime * 1000);
  }
}


/****************************************************************************\
|
|	setup()
|
\****************************************************************************/

void setup() {
    tBoot = millis();

    // set baud rate
    Serial.begin(115200);

    // wait for serial to be ready
    while (! Serial)
        yield();
//    delay(500);

    noBoot++;
    Serial.printf("\n");
    Serial.printf("BresserLoRaWAN.ino: setup() [boot no: %d]\n", noBoot);

    // set up the log; do this fisrt.
    myEventLog.setup();

    // set up lorawan.
    myLoRaWAN.setup();

    // similarly, set up the sensor.
    mySensor.setup(uplinkPeriodMsWeatherSensor);
}

/****************************************************************************\
|
|	loop()
|
\****************************************************************************/

void loop() {
    // the order of these is arbitrary, but you must poll them all.
    myLoRaWAN.loop();
    mySensor.loop();
    myEventLog.loop();

    checkGoingToSleep();
}

/****************************************************************************\
|
|	LoRaWAN methods
|
\****************************************************************************/

// our setup routine does the class setup and then registers an event handler so
// we can see some interesting things
void
cMyLoRaWAN::setup() {
    // simply call begin() w/o parameters, and the LMIC's built-in
    // configuration for this board will be used.
    this->Super::begin(myPinMap);

//    LMIC_selectSubBand(0);
    LMIC_setClockError(MAX_CLOCK_ERROR * 1 / 100);

    this->RegisterListener(
        // use a lambda so we're "inside" the cMyLoRaWAN from public/private perspective
        [](void *pClientInfo, uint32_t event) -> void {
            auto const pThis = (cMyLoRaWAN *)pClientInfo;

            // for tx start, we quickly capture the channel and the RPS
            if (event == EV_TXSTART) {
                // use another lambda to make log prints easy
                myEventLog.logEvent(
                    (void *) pThis,
                    LMIC.txChnl,
                    LMIC.rps,
                    0,
                    // the print-out function
                    [](cEventLog::EventNode_t const *pEvent) -> void {
                        Serial.print(F(" TX:"));
                        myEventLog.printCh(std::uint8_t(pEvent->getData(0)));
                        myEventLog.printRps(rps_t(pEvent->getData(1)));
                    }
                );
            }
            // else if (event == some other), record with print-out function
            else {
                // do nothing.
            }
        },
        (void *) this   // in case we need it.
        );
}

// this method is called when the LMIC needs OTAA info.
// return false to indicate "no provisioning", otherwise
// fill in the data and return true.
bool
cMyLoRaWAN::GetOtaaProvisioningInfo(
    OtaaProvisioningInfo *pInfo
    ) {
    // these are the same constants used in the LMIC compliance test script; eases testing
    // with the RedwoodComm RWC5020B/RWC5020M testers.

    // initialize info
    memcpy(pInfo->DevEUI, deveui, sizeof(pInfo->DevEUI));
    memcpy(pInfo->AppEUI, appeui, sizeof(pInfo->AppEUI));
    memcpy(pInfo->AppKey, appkey, sizeof(pInfo->AppKey));

    return true;
}

// This method is called after the node has joined the network.
void
cMyLoRaWAN::NetJoin(
    void) {
    Serial.printf("The node has joined the network!\n");
}

// This method is called after transmission has been completed.
// If enabled, the controller goes into deep sleep mode now.
void
cMyLoRaWAN::NetTxComplete(void) {
    sleepReq = true;
    Serial.printf("Transmission complete, going to deep sleep...\n");
}


/****************************************************************************\
|
|	Sensor methods
|
\****************************************************************************/

void
cSensor::setup(std::uint32_t uplinkPeriodMs) {
/*    if (!sensor.begin()) {
        while (true) {
            // just loop forever, printing an error occasionally.
            Serial.println("sensor.begin failed");
            delay(2000);
        }
    }
*/
    weatherSensor.begin();

    // set the initial time.
    this->m_uplinkPeriodMs = uplinkPeriodMs;
    this->m_tReference = millis();

    // uplink right away
    this->m_fUplinkRequest = true;
}

void
cSensor::loop(void) {
    auto const tNow = millis();
    auto const deltaT = tNow - this->m_tReference;

    if (deltaT >= this->m_uplinkPeriodMs) {
        // request an uplink
        this->m_fUplinkRequest = true;

        // keep trigger time locked to uplinkPeriod
        auto const advance = deltaT / this->m_uplinkPeriodMs;
        this->m_tReference += advance * this->m_uplinkPeriodMs; 
    }

    // if an uplink was requested, do it.
    if (this->m_fUplinkRequest) {
        this->m_fUplinkRequest = false;
        this->doUplink();
    }
}

// ------------------------------------
// Functions related to weather station
// ------------------------------------
bool
cSensor::getWeatherStationData(uint32_t timeout) {
    // Tries to receive radio message (non-blocking) and to decode it.
    // Timeout occurs after a small multiple of expected time-on-air.
    const uint32_t timestamp = millis();

    while ((millis() - timestamp) < timeout) {
      int decode_status = weatherSensor.getMessage();
      if (decode_status == DECODE_OK || decode_status == DECODE_PAR_ERR) {
          return true;
      } // if (decode_status == DECODE_OK || decode_status == DECODE_PAR_ERR) {
    } // while ((millis() - timestamp) < timeout)

    // Timeout
    return false;
}

void
cSensor::printWeatherStationData() {
    // This example uses only a single slot in the sensor data array
    int const i=0;

    Serial.printf("Id: [%8X] Typ: [%X] Battery: [%s] ",
        weatherSensor.sensor[i].sensor_id,
        weatherSensor.sensor[i].s_type,
        weatherSensor.sensor[i].battery_ok ? "OK " : "Low");
    #ifdef BRESSER_6_IN_1
        Serial.printf("Ch: [%d] ", weatherSensor.sensor[i].chan);
    #endif
    if (weatherSensor.sensor[i].temp_ok) {
        Serial.printf("Temp: [%5.1fC] ",
            weatherSensor.sensor[i].temp_c);
    } else {
        Serial.printf("Temp: [---.-C] ");
    }
    if (weatherSensor.sensor[i].humidity_ok) {
        Serial.printf("Hum: [%3d%%] ",
            weatherSensor.sensor[i].humidity);
    } else {
        Serial.printf("Hum: [---%%] ");
    }
    if (weatherSensor.sensor[i].wind_ok) {
        Serial.printf("Wind max: [%4.1fm/s] Wind avg: [%4.1fm/s] Wind dir: [%5.1fdeg] ",
                weatherSensor.sensor[i].wind_gust_meter_sec,
                weatherSensor.sensor[i].wind_avg_meter_sec,
                weatherSensor.sensor[i].wind_direction_deg);
    } else {
        Serial.printf("Wind max: [--.-m/s] Wind avg: [--.-m/s] Wind dir: [---.-deg] ");
    }
    if (weatherSensor.sensor[i].rain_ok) {
        Serial.printf("Rain: [%7.1fmm] ",  
            weatherSensor.sensor[i].rain_mm);
    } else {
        Serial.printf("Rain: [-----.-mm] "); 
    }
    if (weatherSensor.sensor[i].moisture_ok) {
        Serial.printf("Moisture: [%2d%%] ",
            weatherSensor.sensor[i].moisture);
    } else {
        Serial.printf("Moisture: [--%%] ");
    }
    #if defined BRESSER_6_IN_1 || defined BRESSER_7_IN_1
    if (weatherSensor.sensor[i].uv_ok) {
        Serial.printf("UV index: [%1.1f] ",
            weatherSensor.sensor[i].uv);
    } else {
        Serial.printf("UV index: [-.-%%] ");
    }
    #endif
    #ifdef BRESSER_7_IN_1
    if (weatherSensor.sensor[i].light_ok) {
        Serial.printf("Light (Klux): [%2.1fKlux] ",
            weatherSensor.sensor[i].light_klx);
    } else {
        Serial.printf("Light (lux): [--.-Klux] ");
    }
    #endif      
    Serial.printf("RSSI: [%5.1fdBm]\n", weatherSensor.sensor[i].rssi);
}

// -------------------------------------------
// End of functions related to weather station
// -------------------------------------------

void
cSensor::doUplink(void) {
    // if busy uplinking, just skip
    if (this->m_fBusy) {
        Serial.print("busy");
        return;
    }
    // if LMIC is busy, just skip
    if (LMIC.opmode & (OP_POLL | OP_TXDATA | OP_TXRXPEND)) {
        Serial.print("other operation in progress");
        return;
    }

    // Send measurements from the Bresser weather station
      // Clear all sensor data
    weatherSensor.clearSlots();
      // Get weather data
    bool bWeatherData = getWeatherStationData(getWeatherDataTimeout);
    if (bWeatherData)
        printWeatherStationData();

    // make a measurement
    float mTemperature = 15.0;
    float mPressure = 1000.0;
    float mHumidity = 50.0;

    Serial.print("Sensor: T="); Serial.print(mTemperature);
    Serial.print(" degC, P="); Serial.print(mPressure);
    Serial.print(" hPa, RH="); Serial.print(mHumidity);
    Serial.println("%");

    // XXX format the uplink XXX
    // temperature is 2 bytes from -0x80.00 to +0x7F.FF degrees C
    // humidity is 2 bytes, where 0 == 0% and 0xFFFF == 100%.
    // pressure is 3 bytes, Pa.
    // big-endian.

    std::uint8_t uplink[7];
    auto const t = mTemperature;
    auto const it = std::int16_t(floor(t * 256 + 0.5));
    auto const up = std::uint32_t(floor(mPressure + 0.5));
    auto const uh = std::uint16_t(mHumidity / 100.0 * 65535 + 0.5);

    uplink[0] = std::uint8_t(std::uint16_t(it) >> 8);
    uplink[1] = std::uint8_t(it);
    uplink[2] = std::uint8_t(uh >> 8);
    uplink[3] = std::uint8_t(uh);
    uplink[4] = std::uint8_t(up >> 16);
    uplink[5] = std::uint8_t(up >> 8);
    uplink[6] = std::uint8_t(up);

    this->m_fBusy = true;
    
    if (! myLoRaWAN.SendBuffer(
        uplink, sizeof(uplink),
        // this is the completion function:
        [](void *pClientData, bool fSucccess) -> void {
            auto const pThis = (cSensor *)pClientData;
            pThis->m_fBusy = false;
        },
        (void *)this,
        /* confirmed */ false,
        /* port */ 1
        )) {
        // sending failed; callback has not been called and will not
        // be called. Reset busy flag.
        this->m_fBusy = false;
    }
}
